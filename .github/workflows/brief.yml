name: CMake (rapid build on push)

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name:
      ${{ matrix.platform }}, Parser option ${{ matrix.xml_parser_option }},
      with namespaces ${{ matrix.with_namespace}}, strict includes ${{
      matrix.strict }}, with examples ${{ matrix.with_examples}}, package option
      ${{ matrix.package_option}}, c++  standard ${{matrix.cpp_standard}}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-16.04]
        xml_parser_option: ["-DWITH_LIBXML"]
        with_namespace: ["True"]
        strict: ["True"]
        with_examples: ["True"]
        package_option: ["-DWITH_ALL_PACKAGES=ON"]
        language_bindings:
          ["-DWITH_JAVA=True -DWITH_CSHARP=True -DWITH_PYTHON=True"]
        cpp_standard: [98, 20]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2

      ### configure the operating system ###
      - name: Cache Windows dependencies and SWIG
        # On Windows, the dependencies live inside the source folder, ie `.`.
        # For the CI, we put SWIG there too, for simplicity.
        if: matrix.platform == 'windows-latest'
        id: cache-win-dependencies-static
        uses: actions/cache@v2
        with:
          path: |
            ./dependencies
          key: ${{ runner.os }}-dependencies-static

      - name: Download pre-built Windows dependencies and SWIG
        # Windows dependencies have to be in a subfolder called `dependencies`, directly under the git repository root.
        # also gets SWIG, completing the set of dependencies needed for windows
        if:
          matrix.platform == 'windows-latest' &&
          steps.cache-win-dependencies-static.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies/libSBML_dependencies_vs15_release_x64_static.zip/download > dependencies.zip
          unzip dependencies.zip -d dependencies
          cp -r dependencies/libSBML\ Dependencies-1.0.0-b1-win64/* dependencies
          rm -r dependencies/libSBML*

      - name: Download SWIG on Windows
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          curl -L https://sourceforge.net/projects/swig/files/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip/download > swig.zip
          unzip -o swig.zip -d swig
          echo $GITHUB_WORKSPACE"/swig/swigwin-4.0.2/" >> $GITHUB_PATH

      - name: setup Windows environment
        # this is separate from the SWIG download itself, because it needs to be added to the path also when SWIG is cached
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          echo RUNTIME_LINKING_OPTION="-DWITH_STATIC_RUNTIME=ON" >> "${GITHUB_ENV}"

      - name: Install Ubuntu dependencies
        # ubuntu already has SWIG and libxml2 by default
        if: matrix.platform == 'ubuntu-16.04'
        shell: bash
        run: |
          sudo apt-get install -y check ccache
          echo PYTHON_LINKING_OPTION="-DPYTHON_USE_DYNAMIC_LOOKUP=ON" >> "${GITHUB_ENV}"

      - name: Install MacOS dependencies
        # MacOS already has libxml2 by default
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          brew install check swig ccache
          echo PYTHON_LINKING_OPTION="-DPYTHON_USE_DYNAMIC_LOOKUP=ON" >> "${GITHUB_ENV}"

      ### setup ccache, not on Windows ###
      - name: Prepare ccache timestamp
        if: matrix.platform != 'windows-latest'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Set ccache cache directory
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          echo "CCACHE_DIR=${{runner.workspace}}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"
      - name: cache ccache files
        if: matrix.platform != 'windows-latest'
        uses: actions/cache@v2
        with:
          path: ${{runner.workspace}}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      ### build the project ###
      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake for default XML_parser (LIBXML2)
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_STANDARD=${{matrix.cpp_standard}} \
          -DWITH_CHECK=True \
          -DWITH_CPP_NAMESPACE=${{matrix.with_namespace}} \
          -DLIBSBML_USE_STRICT_INCLUDES=${{matrix.strict}} \
          -DWITH_EXAMPLES=${{matrix.with_examples}} \
          ${{matrix.package_option}} \
          ${{matrix.language_bindings}} \
          ${RUNTIME_LINKING_OPTION} \
          ${PYTHON_LINKING_OPTION}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      ### run tests ###
      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: ctest -V -C $BUILD_TYPE
